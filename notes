configuration management(core funtion)>system admins
datadog agent installtion on ec2
yaml>easy 
redhat ansible
Important>ansible is idempotent in nature>if it's already avialble(installed)-ansible will
NOT execute(install) again(no recreatation-no alreay exists error)


ansible>>agentless,one control node(python prequisite),many manage nodes(any distribtions-prequite-python)
ansible>provisioning resources in cloud,CICD deployment,network automation(CISCO-network appliances)

ansible vs shell scripting vs python
inventory file>>manage nodes list 

ssh protocoal,winrm protocol 

Ansible Core is Written in Python: Ansible itself is developed using Python. The control node (where Ansible is installed and run) requires Python to interpret and execute the Ansible code and modules.

pip install ansible

YAML
===========
YAML can be easily serialized and deserialized in many popular programming languages (Python, Ruby, JavaScript, etc.), making it a great option for data exchange and configuration in different ecosystems.
For example, in Python, you can convert Python objects into YAML (serialization) and load YAML into Python objects (deserialization) easily using libraries like PyYAML.
Hierarchical structure: YAMLâ€™s indentation-based format naturally represents nested and hierarchical structures, which are common in Kubernetes (e.g., pods containing containers, containers exposing ports).
Multiple resources: YAML allows multiple Kubernetes objects to be defined in the same file, separated by ---. This makes it easy to manage and deploy multiple resources at once.

passwordless authentication
====================
ssh-copy-id -f "-o IdentityFile <PATH TO PEM FILE>" ubuntu@<INSTANCE-PUBLIC-IP>
first time provide password,ssh key for the first time.
1)password
2)SSH (using keys(pem files))
ad hoc command(imperative-CLI commands)

ansible inventory file
===================
inventory.ini>>can be in any location
/etc/ansible/hosts>>default file location
list of hostnames(manage nodes)
user@ip address


ansible ad-hoc commands
====================
ansible -i inventory.ini -m ping all
ansible -i inventory.ini -m shell -a "apt install openjdk" all
ansible -i inventory.ini -m ping user1@publicip1
ansible -i inventory.ini -m ping db
ansible -i inventory.ini -m shell -a "sudo ls /etc" all



playbook
=====
playbook list of plays,playbook is collection of plays
playbook consitis of tasks
playbook>>hosts,remoteuser,task(t uses modules-to perform execution)

anisble-playbook -i inventory.ini my-first-playbook.yaml 


ansible roles(modularization-similar to helm charts or terraform modules)
==========
role>>different sectional folders(tasks,vars,handlers,metadata etc )  of the ansibleplaybook 

anisble-galaxy role init role-name
roles >for complicated(many steps) playbooks 
roles can be  uploaded to anisble glaxy or also roles can be donwloaed.
 we can convert playbook to roles(modularization of playbook)

run playbook with role referencing>>using ansible-playbook command only(only playbook yaml file has role's referencing)
 handlers are particular taks>to be executed upon particular action and someone requests(notify) it.










ansible galaxy>>market place for ansible roles
=================
ansbile-galaxy install role role-name(from galaxy)
location>~/.ansible/roles
we can execute roles by referencing them in our playbooks>>running as playbook
import ansible files from github to galaxy
ansible-galaxy import github-username role-name --token value(from galaxy)
rolenamspace will be there for roles/users

