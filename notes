conrol node,managed nodes
configuration management(core funtion)>system admins
datadog agent installtion on ec2
yaml>easy 
redhat ansible
Important>ansible is idempotent in nature>if it's already avialble(installed)-ansible will
NOT execute(install) again(no recreatation-no alreay exists error)


ansible>>agentless,one control node(python prequisite),many manage nodes(any distribtions-prequite-python)
ansible>provisioning resources in cloud,CICD deployment,network automation(CISCO-network appliances)

ansible vs shell scripting vs python
inventory file>>manage nodes list 

ssh protocoal,winrm protocol 

Ansible Core is Written in Python: Ansible itself is developed using Python. The control node (where Ansible is installed and run) requires Python to interpret and execute the Ansible code and modules.

pip install ansible

YAML
===========
YAML can be easily serialized and deserialized in many popular programming languages (Python, Ruby, JavaScript, etc.), making it a great option for data exchange and configuration in different ecosystems.
For example, in Python, you can convert Python objects into YAML (serialization) and load YAML into Python objects (deserialization) easily using libraries like PyYAML.
Hierarchical structure: YAML’s indentation-based format naturally represents nested and hierarchical structures, which are common in Kubernetes (e.g., pods containing containers, containers exposing ports).
Multiple resources: YAML allows multiple Kubernetes objects to be defined in the same file, separated by ---. This makes it easy to manage and deploy multiple resources at once.

passwordless authentication
====================
ssh-copy-id -f "-o IdentityFile <PATH TO PEM FILE>" ubuntu@<INSTANCE-PUBLIC-IP>
first time provide password,ssh key for the first time.
1)password
2)SSH (using keys(pem files))
ad hoc command(imperative-CLI commands)

ansible inventory file
===================
inventory.ini>>can be in any location
/etc/ansible/hosts>>default file location
list of hostnames(manage nodes)
user@ip address


ansible ad-hoc commands
====================
ansible -i inventory.ini -m ping all
ansible -i inventory.ini -m shell -a "apt install openjdk" all
ansible -i inventory.ini -m ping user1@publicip1
ansible -i inventory.ini -m ping db
ansible -i inventory.ini -m shell -a "sudo ls /etc" all



playbook
=====
playbook list of plays,playbook is collection of plays
playbook consitis of tasks
playbook>>hosts,remoteuser,task(t uses modules-to perform execution)

anisble-playbook -i inventory.ini my-first-playbook.yaml 


ansible roles(modularization-similar to helm charts or terraform modules)
==========
ansible role is modularized playbook
role>>different sectional folders(tasks,vars,handlers,metadata etc )  of the ansibleplaybook 

anisble-galaxy role init role-name
roles >for complicated(many steps) playbooks 
roles can be  uploaded to anisble glaxy or also roles can be donwloaed.
 we can convert playbook to roles(modularization of playbook)

run playbook with role referencing>>using ansible-playbook command only(only playbook yaml file has role's referencing)
 handlers are particular taks>to be executed upon particular action and someone requests(notify) it.





ansible galaxy>>market place for ansible roles
=================
ansbile-galaxy install role role-name(from galaxy)
location>~/.ansible/roles
we can execute roles by referencing them in our playbooks>>running as playbook
import ansible files from github to galaxy
ansible-galaxy import github-username role-name --token value(from galaxy)
rolenamspace will be there for roles/users




ansible collection
==================== 
first install aws amazon colletions
boto3 to be installed on control node
commands are executed on the control node itself>talking to aws apis..so inventory file
hosts: localhost and connection: local tell Ansible to run the playbook on your local machine (control node), but the API requests (like launching EC2 instances) are sent to AWS services from the local machine.
Your local machine, where Ansible is running, sends API requests to AWS to launch or manage resources.In essence, Ansible uses the local machine (control node) to send instructions to AWS, but the resources themselves are deployed in AWS.
The playbook connects to AWS using the AWS credentials (configured locally) and makes API calls to AWS.
When managing cloud resources like EC2, S3, RDS, etc., you don’t need to SSH into any remote machine because AWS provides an API that you can interact with directly from the control node. That’s why Ansible executes tasks locally on localhost.
localhost tells Ansible that you’re running the playbook on the control node itself (not on a remote host).
connection: local instructs Ansible not to use SSH or any other protocol to connect to a remote host. Instead, it runs the tasks locally.
In a typical Ansible playbook, hosts would refer to target nodes (e.g., remote servers) where tasks need to be executed.
But when you're dealing with AWS resources, there are no actual target nodes at the time of running the playbook (because you're creating them). You need to run the playbook from your control node (which is often your local machine or another EC2 instance).
The control node will use the AWS credentials (from environment variables or a credentials file) to authenticate with AWS and make API calls to launch the necessary resources.
Important>>you can launch resource using the roles(modularization)
vault integration(builtin) to store access and secret keys>>ansible vault
create password for vault and add keys to valut
ansible-playbook inventory.ini(not requried) ec2_create.yaml --vault-password-file vault.pass
appox 22 ways vars can be declared in ansible!!
vars folder(main.yaml) has more precedence to defaultt(main.yaml)
-e >>extra vars hightest precedence


error handling in ansible
================
oreder of execution of tasks in ansible
Task Execution Order: Top-to-Bottom
 Host Execution Strategy
Ansible executes tasks host-by-host. By default, it will execute each task on all hosts before moving on to the next task.
For example, if you have three hosts in your inventory, Ansible will:
Execute Task 1 on Host A, then Host B, then Host C.
After all hosts have completed Task 1, it will proceed to Task 2, and so on.
ummary of Task Execution Order in Ansible:
Tasks are executed in the order they appear in the playbook.
Ansible runs tasks host-by-host, meaning all hosts complete one task before moving to the next task.
Handlers and pre_tasks/post_tasks provide mechanisms to modify the execution flow.
You can control task execution using conditions (when), and you can handle errors or define failure conditions using directives like ignore_errors, failed_when, and block.
This sequential and predictable execution order is one of Ansible's key strengths, ensuring clear and consistent automation workflows.
Default Behavior (Without Error Handling)
By default, if a task fails on any host, Ansible marks the playbook as failed and:

Stops the task execution on that host.
Continues running the task on other hosts.
After completing the current task on all hosts, Ansible stops the playbook entirely.Handling Task Failures with ignore_errors
If you want Ansible to continue execution even when a task fails, you can use the ignore_errors: yes directive. This allows the playbook to continue running even after a task failure.
Summary of Failure Scenarios:
Default Behavior: Task fails on one host (e.g., Host C), Ansible stops executing tasks on that host but continues on other hosts. Playbook stops after the current task.
ignore_errors: Task failures are ignored, and the playbook continues executing on all hosts, including the failed ones.
failed_when: Custom failure conditions can be defined. Ansible stops task execution based on these conditions.
max_fail_percentage: You can set a failure threshold (e.g., 30%) before Ansible stops the playbook.
any_errors_fatal: If any host fails, Ansible stops the playbook immediately for all hosts.
serial: Tasks are executed in batches. Failed hosts can be retried after the first batch completes.
These mechanisms allow you to control how Ansible reacts to failures, ensuring that your playbooks can handle errors in the way that best fits your use case.